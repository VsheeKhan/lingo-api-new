AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Eir

  Sample SAM Template for Eir

# Parameters that can be used everywhere
Parameters:
  Environment:
    Type: String
    Default: DEV
    Description: (Required) Environment type
    AllowedValues:
      - DEV
      - PROD
  Origin:
    Type: String
    Default: http://localhost:3000
    Description: (Required) Frontend web app "Origin" which is allowed for CORS.
    AllowedValues:
      - http://localhost:3000
      - https://main.d3pbzq317h5g22.amplifyapp.com

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    CodeUri: functions/
    Environment:
      Variables:
        BOOKS_TABLE_NAME: &books_table_name !Sub ${Environment}_books
        ALLOW_METHODS: 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'
        ALLOW_HEADERS: 'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'
        ALLOW_ORIGIN: !Sub '${Origin}'
        ALLOW_CREDENTIALS: true
        SNS_EXTERNAL_ID: &sns_external_id "b989b444-47ef-4609-b9ae-d127c035a44b"
        ENVIRONMENT: ${Environment}

Resources:
  # API
  MainApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Environment}_API
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
        AllowOrigin: !Sub "'${Origin}'"
        MaxAge: "'600'"
        AllowCredentials: true
      Auth:
        Authorizers:
          EirCognitoAuthorizer:
            UserPoolArn: !GetAtt EirCognitoUserPool.Arn

  # Lambda Functions
  ListBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ListBooks
      Handler: books.app.books_list_lambda_handler
      Events:
        ListBooksCaller:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreateBook
      Handler: books.app.books_create_lambda_handler
      Events:
        CreateBookCaller:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  DeleteBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeleteBook
      Handler: books.app.books_delete_lambda_handler
      Events:
        DeleteBooksCaller:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  GetSingleBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetBook
      Handler: books.app.book_get_single_lambda_handler
      Events:
        GetSingleBookCaller:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  # AllScripts Functions
  GetSecurityTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetSecurityToken
      Handler: adp.app.get_security_token_lambda_handler
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/getSecurityToken
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer

  MagicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_Magic
      Handler: adp.app.magic_lambda_handler
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/magic
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  EchoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_Echo
      Handler: adp.app.echo_lambda_handler
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/echo
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # Database
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *books_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # User Pool
  EirCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment}_EirCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: phone_number
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
        - phone_number
      SmsConfiguration:
        SnsCallerArn: !GetAtt EirCognitoSnsIamRole.Arn
        ExternalId: *sns_external_id

  EirCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref EirCognitoUserPool
      ClientName: !Sub ${Environment}_EirCognitoUserPoolClient
      GenerateSecret: false

  EirCognitoSnsIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}_EirCognitoSnsIamRole
      Description: "IAM role to call SNS publish which in turn will send SMS message"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: *sns_external_id
      Policies:
        - PolicyName: SnsPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - "*"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Origin:
    Description: "Domain configured as allowed Origin"
    Value: !Sub '${Origin}'
  MainApi:
    Description: "API Gateway endpoint URL for Prod stage for Books related functions"
    Value: !Sub "https://${MainApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}_API"
  EirCognitoUserPool:
    Description: "Cognito User Pool ID"
    Value: !Sub "${EirCognitoUserPool}"
  EirCognitoUserPoolClient:
    Description: "Cognito User Pool Client ID"
    Value: !Sub "${EirCognitoUserPoolClient}"
