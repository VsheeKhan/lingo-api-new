AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Eir

  Sample SAM Template for Eir

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        BOOKS_TABLE_NAME: books

Resources:
  OlaNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Ola  # Name for lambda function, if not set gets generated automatically
      Timeout: 3
      MemorySize: 128
      Handler: app.ola_name_lambda_handler
      CodeUri: functions/ola/
      Runtime: python3.8
      Events: # What is going to trigger the function (ex. Api, SQS)?
        HelloNameCaller: # Name of the event. (could be anything)
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /ola
            Method: post

  BooksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
#      Cors: "'*'"  # TODO ishan 13-09-2021 This needs to be tightened for security
      Cors:
        AllowCredentials: true
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
#        AllowOrigin: "'amazonaws.com'"
        AllowOrigin: "'localhost:3000'"
#        MaxAge: String
#        AllowOrigin: "'*'"
#        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
#        AllowHeaders: "'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
      Auth:
        DefaultAuthorizer: EirCognitoAuthorizer
        Authorizers:
          EirCognitoAuthorizer:
            UserPoolArn: !GetAtt EirCognitoUserPool.Arn

  ListBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListBooks
      Timeout: 30
      MemorySize: 128
      Handler: app.books_list_lambda_handler
      CodeUri: functions/books/
      Runtime: python3.8
      Events:
        ListBooksCaller:
          Type: Api
          Properties:
            RestApiId: !Ref BooksApi
            Path: /book
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateBook
      Timeout: 30
      MemorySize: 128
      Handler: app.books_create_lambda_handler
      CodeUri: functions/books/
      Runtime: python3.8
      Events:
        CreateBookCaller:
          Type: Api
          RestApiId: !Ref BooksApi
          Properties:
            Path: /book
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  DeleteBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteBook
      Timeout: 30
      MemorySize: 128
      Handler: app.books_delete_lambda_handler
      CodeUri: functions/books/
      Runtime: python3.8
      Events:
        DeleteBooksCaller:
          Type: Api
          RestApiId: !Ref BooksApi
          Properties:
            Path: /book/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  GetSingleBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBook
      Timeout: 30
      MemorySize: 128
      Handler: app.book_get_single_lambda_handler
      CodeUri: functions/books/
      Runtime: python3.8
      Events:
        GetSingleBookCaller:
          Type: Api
          Properties:
            RestApiId: !Ref BooksApi
            Path: /book/{id}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: books
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  EirCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: EirCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email

  EirCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref EirCognitoUserPool
      ClientName: EirCognitoUserPoolClient
      GenerateSecret: false

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OlaNameApi:
    Description: "API Gateway endpoint URL for Prod stage for Ola Name function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ola/"
  OlaNameFunction:
    Description: "Ola Name Lambda Function ARN"
    Value: !GetAtt OlaNameFunction.Arn
  OlaNameFunctionIamRole:
    Description: "Implicit IAM Role created for Ola Name function"
    Value: !GetAtt OlaNameFunctionRole.Arn

  BooksApi:
    Description: "API Gateway endpoint URL for Prod stage for Books related functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/book/"
