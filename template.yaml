AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Eir

  AWS SAM Template for Eir

# Parameters that can be used everywhere
Parameters:
  Environment:
    Type: String
    Default: DEV
    Description: (Required) Environment type
    AllowedValues:
      - DEV
      - TEST
      - PROD
  Origin:
    Type: String
    Default: http://localhost:3000
    Description: (Required) Frontend web app "Origin" which is allowed for CORS.
    AllowedValues:
      - http://localhost:3000
      - https://main.d3pbzq317h5g22.amplifyapp.com
      - https://lingoui-health.dev-ioteractions.org

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    Environment:
      Variables:
        BOOKS_TABLE_NAME: &books_table_name !Sub ${Environment}_books
        ALLERGY_TABLE_NAME: &allergy_table_name !Sub ${Environment}_allergy
        IMMUNIZATION_TABLE_NAME: &immunization_table_name !Sub ${Environment}_immunization
        PATIENTS_TABLE_NAME: &patients_table_name !Sub ${Environment}_patients
        CONTACTS_TABLE_NAME: &contacts_table_name !Sub ${Environment}_contacts
        ALLOW_METHODS: 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'
        ALLOW_HEADERS: 'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'
        ALLOW_ORIGIN: !Sub '${Origin}'
        ALLOW_CREDENTIALS: true
        SNS_EXTERNAL_ID: &sns_external_id "b989b444-47ef-4609-b9ae-d127c035a44b"
        ENVIRONMENT: ${Environment}

Resources:
  # API
  MainApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Environment}_API
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
        AllowOrigin: !Sub "'${Origin}'"
        MaxAge: "'600'"
        AllowCredentials: true
      Auth:
        Authorizers:
          EirCognitoAuthorizer:
            UserPoolArn: !GetAtt EirCognitoUserPool.Arn

  # Lambda Functions
  ListBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ListBooks
      Handler: books.app.books_list_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreateBook
      Handler: books.app.books_create_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  DeleteBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeleteBook
      Handler: books.app.books_delete_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BooksTable

  GetSingleBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetBook
      Handler: books.app.book_get_single_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /book/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BooksTable

  # Allergy
  ListAllergiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ListAllergies
      Handler: allergy.app.allergy_list_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /allergy
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AllergyTable

  CreateAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreateAllergy
      Handler: allergy.app.allergy_create_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /allergy
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AllergyTable

  DeleteAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeleteAllergy
      Handler: allergy.app.allergy_delete_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /allergy/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AllergyTable

  GetAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetAllergy
      Handler: allergy.app.allergy_get_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /allergy/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AllergyTable

  UpdateAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_UpdateAllergy
      Handler: allergy.app.allergy_update_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /allergy/{pk}
            Method: put
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AllergyTable

  # Immunization
  ListImmunizationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ListImmunizations
      Handler: immunization.app.immunization_list_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /immunization
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ImmunizationTable

  CreateImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreateImmunization
      Handler: immunization.app.immunization_create_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /immunization
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImmunizationTable

  DeleteImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeleteImmunization
      Handler: immunization.app.immunization_delete_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /immunization/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImmunizationTable

  GetImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetImmunization
      Handler: immunization.app.immunization_get_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /immunization/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ImmunizationTable

  UpdateImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_UpdateImmunization
      Handler: immunization.app.immunization_update_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /immunization/{pk}
            Method: put
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImmunizationTable

  #Patient
  CreatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreatePatient
      Handler: patients.app.patient_create_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /patient
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable

  DeletePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeletePatient
      Handler: patients.app.patient_delete_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /patient/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable

  GetPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetPatient
      Handler: patients.app.patient_get_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /patient/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PatientsTable

  UpdatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_UpdatePatient
      Handler: patients.app.patient_update_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /patient/{pk}
            Method: put
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientsTable

  #Contacts
  ListContactsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ListContacts
      Handler: contacts.app.contacts_list_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /contact/{patient_id}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContactsTable

  CreateContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_CreateContact
      Handler: contacts.app.contact_create_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /contact
            Method: post
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable

  UpdateContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_UpdateContact
      Handler: contacts.app.contact_update_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /contact/{pk}
            Method: put
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable

  DeleteContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_DeleteContact
      Handler: contacts.app.contact_delete_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /contact/{pk}
            Method: delete
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable

  GetSingleContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_GetContact
      Handler: contacts.app.contact_get_single_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /contact/{pk}
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContactsTable

  # AllScripts Functions
  # GetSecurityToken
  ProEHRGetSecurityTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPHRGetSecurityToken
      Handler: adp.app.pro_ehr_get_security_token_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/getSecurityToken
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProPMGetSecurityTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetSecurityToken
      Handler: adp.app.pro_pm_get_security_token_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/getSecurityToken
            Method: get
            Auth:
              Authorizer: EirCognitoAuthorizer

  # Magic (Generic API)
  ProEHRMagicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRMagic
      Handler: adp.app.pro_ehr_magic_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/magic
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProPMMagicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMMagic
      Handler: adp.app.pro_pm_magic_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/magic
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # Echo
  ProEHREchoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHREcho
      Handler: adp.app.pro_ehr_echo_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/echo
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProPMEchoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMEcho
      Handler: adp.app.pro_pm_echo_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/echo
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetUserAuthentication
  ProEHRGetUserAuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetUserAuthentication
      Handler: adp.app.pro_ehr_get_user_authentication_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_user_athentication
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProPMGetUserAuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetUserAuthentication
      Handler: adp.app.pro_pm_get_user_authentication_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_user_athentication
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchPatients
  ProEHRSearchPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSearchPatients
      Handler: adp.app.pro_ehr_search_patients_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/search_patients
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProPMSearchPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSearchPatients
      Handler: adp.app.pro_pm_search_patients_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/search_patients
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatient
  ProPMSavePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSavePatient
      Handler: adp.app.pro_pm_save_patient_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_patient
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientDemographics
  ProPMGetPatientDemographicsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientDemographics
      Handler: adp.app.pro_pm_get_patient_demographics_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_demographics
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetResources
  ProPMGetResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetResources
      Handler: adp.app.pro_pm_get_resources_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_resources
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetResourceByID
  ProPMGetResourceByIDFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetResourceByID
      Handler: adp.app.pro_pm_get_resource_by_id_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_resource_by_id
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAvailableSchedule
  ProPMGetAvailableScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAvailableSchedule
      Handler: adp.app.pro_pm_get_available_schedule_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_available_schedule
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetSchedulingLocations
  ProPMGetSchedulingLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetSchedulingLocations
      Handler: adp.app.pro_pm_get_scheduling_locations_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_scheduling_locations
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetSchedulingDepartments
  ProPMGetSchedulingDepartmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetSchedulingDepartments
      Handler: adp.app.pro_pm_get_scheduling_departments_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_scheduling_departments
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetSchedule
  ProPMGetScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetSchedule
      Handler: adp.app.pro_pm_get_schedule_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_schedule
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetScheduleByPatientID
  ProPMGetScheduleByPatientIDFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetScheduleByPatientID
      Handler: adp.app.pro_pm_get_schedule_by_patient_id_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_schedule_by_patient_id
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentById
  ProPMGetAppointmentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentById
      Handler: adp.app.pro_pm_get_appointment_by_id_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointment_by_id
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveAppointment
  ProPMSaveAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveAppointment
      Handler: adp.app.pro_pm_save_appointment_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_appointment
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveForcedAppointment
  ProPMSaveForcedAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveForcedAppointment
      Handler: adp.app.pro_pm_save_forced_appointment_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_forced_appointment
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveMemoAppointment
  ProPMSaveMemoAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveMemoAppointment
      Handler: adp.app.pro_pm_save_memo_appointment_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_memo_appointment
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentTypes
  ProPMGetAppointmentTypesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentTypes
      Handler: adp.app.pro_pm_get_appointment_types_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointment_types
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAvailableTimeBlocks
  ProPMGetAvailableTimeBlocksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAvailableTimeBlocks
      Handler: adp.app.pro_pm_get_available_time_blocks_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_available_time_blocks
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentRestrictions
  ProPMGetAppointmentRestrictionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentRestrictions
      Handler: adp.app.pro_pm_get_appointment_restriction_types_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointment_restriction_types
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentConfirmationResults
  ProPMGetAppointmentConfirmationResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentConfirmationResults
      Handler: adp.app.pro_pm_get_appointment_confirmation_results_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointment_confirmation_results
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentCancellationReasons
  ProPMGetAppointmentCancellationReasonsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentCancellationReasons
      Handler: adp.app.pro_pm_get_appointment_cancellation_reasons_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointment_cancellation_reasons
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAppointmentsByChangeDTTM
  ProPMGetAppointmentsByChangeDTTMFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAppointmentsByChangeDTTM
      Handler: adp.app.pro_pm_get_appointments_by_change_dttm_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_appointments_by_change_dttm
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SetAppointmentStatus
  ProPMSetAppointmentStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSetAppointmentStatus
      Handler: adp.app.pro_pm_set_appointment_status_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/set_appointment_status
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPractitioners
  ProPMGetPractitionersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPractitioners
      Handler: adp.app.pro_pm_get_practitioners_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_practitioners
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPractitionerSpecialties
  ProPMGetPractitionerSpecialtiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPractitionerSpecialties
      Handler: adp.app.pro_pm_get_practitioner_specialities_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_practitioner_specialities
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetOperators
  ProPMGetOperatorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetOperators
      Handler: adp.app.pro_pm_get_operators_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_operators
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientPolicyPCPs
  ProPMGetPatientPolicyPCPsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientPolicyPCPs
      Handler: adp.app.pro_pm_get_patient_policy_pcps_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_policy_pcps
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAccountTypes
  ProPMGetAccountTypesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAccountTypes
      Handler: adp.app.pro_pm_get_account_types_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_account_types
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetBatchCategories
  ProPMGetBatchCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetBatchCategories
      Handler: adp.app.pro_pm_get_batch_categories_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_batch_categories
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetBatchDetail
  ProPMGetBatchDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetBatchDetail
      Handler: adp.app.pro_pm_get_batch_detail_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_batch_detail
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetCarriers
  ProPMGetCarriersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetCarriers
      Handler: adp.app.pro_pm_get_carriers_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_carriers
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetCoverageTypes
  ProPMGetCoverageTypesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetCoverageTypes
      Handler: adp.app.pro_pm_get_coverage_types_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_coverage_types
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetDepartments
  ProPMGetDepartmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetDepartments
      Handler: adp.app.pro_pm_get_departments_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_departments
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetDivisions
  ProPMGetDivisionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetDivisions
      Handler: adp.app.pro_pm_get_divisions_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_divisions
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetEmployerBenefitPlan
  ProPMGetEmployerBenefitPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetEmployerBenefitPlan
      Handler: adp.app.pro_pm_get_employer_benefit_plan_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_employer_benefit_plan
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetLocations
  ProPMGetLocationsPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetLocationsPlan
      Handler: adp.app.pro_pm_get_locations_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_locations
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientAccountBalance
  ProPMGetPatientAccountBalanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientAccountBalance
      Handler: adp.app.pro_pm_get_patient_account_balance_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_account_balance
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientAccountBalanceCalc
  ProPMGetPatientAccountBalanceCalcFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientAccountBalanceCalc
      Handler: adp.app.pro_pm_get_patient_account_balance_calc_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_account_balance_calc
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientPolicy
  ProPMGetPatientPolicyCalcFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientPolicyCalc
      Handler: adp.app.pro_pm_get_patient_policy_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_policy
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientSlidingFeeInfo
  ProPMGetPatientSlidingFeeInfoCalcFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientSlidingFeeInfoCalc
      Handler: adp.app.pro_pm_get_patient_sliding_fee_info_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_sliding_fee_info
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPlacesOfService
  ProPMGetPlacesOfServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPlacesOfService
      Handler: adp.app.pro_pm_get_places_of_service_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_places_of_service
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetServicesByVoucherID
  ProPMGetServicesByVoucherIDFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetServicesByVoucherID
      Handler: adp.app.pro_pm_get_services_by_voucher_id_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_services_by_voucher_id
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetSlidingFeeScales
  ProPMGetSlidingFeeScalesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetSlidingFeeScales
      Handler: adp.app.pro_pm_get_sliding_fee_scales_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_sliding_fee_scales
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetTransactionCodes
  ProPMGetTransactionCodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetTransactionCodes
      Handler: adp.app.pro_pm_get_transaction_codes_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_transaction_codes
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # ReopenBatch
  ProPMReopenBatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMReopenBatch
      Handler: adp.app.pro_pm_reopen_batch_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/reopen_batch
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveChargeVoucher
  ProPMSaveChargeVoucherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveChargeVoucher
      Handler: adp.app.pro_pm_save_charge_voucher_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_charge_voucher
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatientPolicy
  ProPMSavePatientPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSavePatientPolicy
      Handler: adp.app.pro_pm_save_patient_policy_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_patient_policy
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatientSlidingFee
  ProPMSavePatientSlidingFeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSavePatientSlidingFee
      Handler: adp.app.pro_pm_save_patient_sliding_fee_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_patient_sliding_fee
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePaymentTransaction
  ProPMSavePaymentTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSavePaymentTransaction
      Handler: adp.app.pro_pm_save_payment_transaction_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_payment_transaction
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveVoucherPayment
  ProPMSaveVoucherPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveVoucherPayment
      Handler: adp.app.pro_pm_save_voucher_payment_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_voucher_payment
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetChangedPatients
  ProEHRGetChangedPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetChangedPatients
      Handler: adp.app.pro_pm_get_changed_patients_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_changed_patients
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  ProEHRGetChangedPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetChangedPatients
      Handler: adp.app.pro_ehr_get_changed_patients_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_changed_patients
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetClinicalSummary
  ProEHRGetClinicalSummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetClinicalSummary
      Handler: adp.app.pro_ehr_get_clinical_summary_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_clinical_summary
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientsBySomething
  ProEHRGetPatientsBySomethingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetPatientsBySomething
      Handler: adp.app.pro_ehr_get_patients_by_something_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_patients_by_something
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatientBloodType
  ProEHRSavePatientBloodTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSavePatientBloodType
      Handler: adp.app.pro_ehr_save_patient_blood_type_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/save_patient_blood_type
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientPharmacies
  ProEHRGetPatientPharmaciesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetPatientPharmacies
      Handler: adp.app.pro_ehr_get_patient_pharmacies_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_patient_pharmacies
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPharmacyEligibility
  ProEHRGetPharmacyEligibilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetPharmacyEligibility
      Handler: adp.app.pro_ehr_get_pharmacy_eligibility_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_pharmacy_eligibility
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatientRetailPharmacy
  ProEHRSavePatientRetailPharmacyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSavePatientRetailPharmacy
      Handler: adp.app.pro_ehr_save_patient_retail_pharmacy_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/save_patient_retail_pharmacy
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SetFMHInvite
  ProEHRSetFMHInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSetFMHInvite
      Handler: adp.app.pro_ehr_set_fmh_invite_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/set_fmh_invite
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetClinicalQuestions
  ProEHRGetClinicalQuestionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetClinicalQuestions
      Handler: adp.app.pro_ehr_get_clinical_questions_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_clinical_questions
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetProcedureDetails
  ProEHRGetProcedureDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetProcedureDetails
      Handler: adp.app.pro_ehr_get_procedure_details_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_procedure_details
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetProcedures
  ProEHRGetProceduresFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetProcedures
      Handler: adp.app.pro_ehr_get_procedures_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_procedures
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetEmployers
  ProPMGetEmployersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetEmployers
      Handler: adp.app.pro_pm_get_employers_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_employers
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveAccountContact
  ProPMSaveAccountContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveAccountContact
      Handler: adp.app.pro_pm_save_account_contact_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_account_contact
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientContacts
  ProPMGetPatientContactsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetPatientContacts
      Handler: adp.app.pro_ehr_get_patient_contacts_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_patient_contacts
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveEmployer
  ProPMSaveEmployerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveEmployer
      Handler: adp.app.pro_pm_save_employer_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_employer
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetServices
  ProPMGetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetServices
      Handler: adp.app.pro_pm_get_services_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_services
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetResourceGroupMembership
  ProPMGetResourceGroupMembershipFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetResourceGroupMembership
      Handler: adp.app.pro_pm_get_resource_group_membership_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_resource_group_membership
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetResourceGroups
  ProPMGetResourceGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetResourceGroups
      Handler: adp.app.pro_pm_get_resource_groups_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_resource_groups
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetImageCategory
  ProPMGetImageCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetImageCategory
      Handler: adp.app.pro_pm_get_image_category_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_image_category
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetImageData
  ProPMGetImageDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetImageData
      Handler: adp.app.pro_pm_get_image_data_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_image_data
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetImages
  ProPMGetImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetImages
      Handler: adp.app.pro_pm_get_images_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_images
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetNotes
  ProPMGetNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetNotes
      Handler: adp.app.pro_pm_get_notes_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_notes
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetNoteTypes
  ProPMGetNoteTypesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetNoteTypes
      Handler: adp.app.pro_pm_get_note_types_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_note_types
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveImage
  ProPMSaveImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSaveImage
      Handler: adp.app.pro_pm_save_image_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_image
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SavePatientNote
  ProPMSavePatientNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSavePatientNote
      Handler: adp.app.pro_pm_save_patient_note_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/save_patient_note
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetDiagnoses
  ProPMGetDiagnosesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetDiagnoses
      Handler: adp.app.pro_pm_get_diagnoses_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_diagnoses
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchDiagnosisCodes
  ProPMSearchDiagnosisCodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSearchDiagnosisCodes
      Handler: adp.app.pro_pm_search_diagnosis_codes_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/search_diagnosis_codes
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAdditionalInfoByPatient
  ProPMGetAdditionalInfoByPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAdditionalInfoByPatient
      Handler: adp.app.pro_pm_get_additional_info_by_patient_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_additional_info_by_patient
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetGenders
  ProPMGetGendersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetGenders
      Handler: adp.app.pro_pm_get_genders_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_genders
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetMaritalStatuses
  ProPMGetMaritalStatusesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetMaritalStatuses
      Handler: adp.app.pro_pm_get_marital_statuses_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_marital_statuses
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetMedicalRecordLocations
  ProPMGetMedicalRecordLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetMedicalRecordLocations
      Handler: adp.app.pro_pm_get_medical_record_locations_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_medical_record_locations
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetPatientAdditionalInfoValues
  ProPMGetPatientAdditionalInfoValuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetPatientAdditionalInfoValues
      Handler: adp.app.pro_pm_get_patient_additional_info_values_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_patient_additional_info_values
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetRelationships
  ProPMGetRelationshipsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetRelationships
      Handler: adp.app.pro_pm_get_relationships_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_relationships
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetRequiredFields
  ProPMGetRequiredFieldsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetRequiredFields
      Handler: adp.app.pro_pm_get_required_fields_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/get_required_fields
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SetPatientAdditionalInfoValue
  ProPMSetPatientAdditionalInfoValueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMSetPatientAdditionalInfoValue
      Handler: adp.app.pro_pm_set_patient_additional_info_value_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_pm/set_patient_additional_info_value
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetAllergies
  ProPMGetAllergiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProPMGetAllergies
      Handler: adp.app.pro_ehr_get_allergies_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_allergies
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetImmunization
  ProEHRGetImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetImmunization
      Handler: adp.app.pro_ehr_get_immunization_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_immunization
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # GetProblems
  ProEHRGetProblemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRGetProblems
      Handler: adp.app.pro_ehr_get_problems_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/get_problems
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveAllergy
  ProEHRSaveAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSaveAllergy
      Handler: adp.app.pro_ehr_save_allergy_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/save_allergy
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveImmunization
  ProEHRSaveImmunizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSaveImmunization
      Handler: adp.app.pro_ehr_save_immunization_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/save_immunization
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SaveProblemsData
  ProEHRSaveProblemsDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSaveProblemsData
      Handler: adp.app.pro_ehr_save_problems_data_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/save_problems_data
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchAllergy
  ProEHRSearchAllergyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSearchAllergy
      Handler: adp.app.pro_ehr_search_allergy_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/search_allergy
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchImmunizations
  ProEHRSearchImmunizationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSearchImmunizations
      Handler: adp.app.pro_ehr_search_immunizations_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/search_immunizations
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchMeds
  ProEHRSearchMedsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSearchMeds
      Handler: adp.app.pro_ehr_search_meds_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/search_meds
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # SearchProblemCodes
  ProEHRSearchProblemCodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}_ProEHRSearchProblemCodes
      Handler: adp.app.pro_ehr_search_problem_codes_lambda_handler
      CodeUri: functions/
      Events:
        ApiRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MainApi
            Path: /adp/pro_ehr/search_problem_codes
            Method: POST
            Auth:
              Authorizer: EirCognitoAuthorizer

  # Database
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *books_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  AllergyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *allergy_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ImmunizationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *immunization_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  PatientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *patients_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: *contacts_table_name
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # User Pool
  EirCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment}_EirCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: phone_number
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
        - phone_number
      SmsConfiguration:
        SnsCallerArn: !GetAtt EirCognitoSnsIamRole.Arn
        ExternalId: *sns_external_id

  EirCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref EirCognitoUserPool
      ClientName: !Sub ${Environment}_EirCognitoUserPoolClient
      GenerateSecret: false

  EirCognitoSnsIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}_EirCognitoSnsIamRole
      Description: "IAM role to call SNS publish which in turn will send SMS message"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: *sns_external_id
      Policies:
        - PolicyName: SnsPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource:
                  - "*"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Origin:
    Description: "Domain configured as allowed Origin"
    Value: !Sub '${Origin}'
  MainApi:
    Description: "API Gateway endpoint URL for Prod stage for Books related functions"
    Value: !Sub "https://${MainApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}_API"
  EirCognitoUserPool:
    Description: "Cognito User Pool ID"
    Value: !Sub "${EirCognitoUserPool}"
  EirCognitoUserPoolClient:
    Description: "Cognito User Pool Client ID"
    Value: !Sub "${EirCognitoUserPoolClient}"
